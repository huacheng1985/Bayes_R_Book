[["Bayes-Inf.html", "Chapter 4 Introduction to Bayesian Inference 4.1 Install the JAGS for R 4.2 Bernoulli and Binomial Distributions in JAGS 4.3 Beta Distribution in JAGS", " Chapter 4 Introduction to Bayesian Inference 4.1 Install the JAGS for R 4.1.1 Install JAGS The following are the steps to install the Bayesian sampling program JAGS. Go to website http://mcmc-jags.sourceforge.net for instructions. To download the JAGS installation program (JAGS –x.x.x.exe), visit the webpage https://sourceforge.net/projects/mcmc-jags/files. Figure 1. Install the JAGS Run the JAGS installation program to install JAGS. When asked to Choose Install Location, select the folder created earlier, e.g. C:\\Bayesian\\JAGS-4.2.0, and follow the installation instructions. If you are a mac user, then don’t worry about the file location. 4.1.2 Install Package rjags The following are the steps to install R package rjags (to let R talk to JAGS). There are two ways to do this: In the RStudio menu bar at the top of the screen, select Tools→Install Packages, then type rjags under Packages. Figure 2. Install the “rjags” R package Or you can in the R Studio console window, type install.packages(&quot;rjags&quot;) 4.2 Bernoulli and Binomial Distributions in JAGS 4.2.1 Set the working directory To run this file, we create a folder called ‘Bernoulli and Binomial’. Currently, the code assumes this is in the C drive as C:\\Bayes Course\\Analyses\\Bernoulli and Binomial\\ Inside the ‘Bernoulli and Binomial’ folder, create a subfolder called ‘R’. Currently, the code assumes this is in the C drive as C:\\Bayes Course\\Analyses\\Bernoulli and Binomial\\R\\ . We store this file in the ‘R’ folder. The following is the R code demonstrating a Bayesian analysis using R and JAGS. # Remove objects from memory rm(list=ls()) # Define folders with locations # Here is where you can change the location of the &quot;main folder&quot; main.folder &lt;- &quot;Bayes Course/Analyses/Bernoulli and Binomial/&quot; R.folder &lt;- paste0(main.folder, &quot;R/&quot;) jags.folder &lt;- paste0(main.folder, &quot;jags/&quot;) dir.create(jags.folder) ## Warning in dir.create(jags.folder): &#39;Bayes Course/Analyses/Bernoulli and ## Binomial/jags&#39; already exists # Call the packages library(rjags) ## Warning: package &#39;rjags&#39; was built under R version 4.0.2 ## Loading required package: coda ## Warning: package &#39;coda&#39; was built under R version 4.0.2 ## Linked to JAGS 4.3.0 ## Loaded modules: basemod,bugs 4.2.2 Define the Model and Write out the code # Define the model in JAGS code modelstring &lt;- as.character(&quot; model{ theta &lt;- .7 x ~ dbern(theta) y ~ dbin(theta, J) } # closes the model &quot;) # closes the model as string # Write out the code to a file model.file.name &lt;- &quot;Bernoulli and Binomial Distributions.txt&quot; write(x=modelstring, file=paste0(jags.folder, model.file.name), append=FALSE) 4.2.3 Model Specification # Define data used in the model J=10 # number of trials in the binomial model # Arrange the data to supply to JAGS jags.data &lt;- list(&quot;J&quot;=J) # Define entities to monitor entities.to.monitor &lt;- c(&quot;x&quot;, &quot;y&quot;) # Choose features of MCMC # The number of iterations n.iters = 10 # Run MCMC # Move to the JAGS folder setwd(jags.folder) # Initialize the model jags.model.initialized &lt;- jags.model(file=model.file.name, data=jags.data) ## Compiling model graph ## Resolving undeclared variables ## Allocating nodes ## Graph information: ## Observed stochastic nodes: 0 ## Unobserved stochastic nodes: 2 ## Total graph size: 4 ## ## Initializing model 4.2.4 Model Results # Now obtain the distribution jags.model.fitted &lt;- coda.samples( model=jags.model.initialized, variable.names=entities.to.monitor, n.iter=n.iters, progress.bar=&quot;gui&quot;) # Plot the results plot(jags.model.fitted, smooth = FALSE) # Numerically summarize the results summary(jags.model.fitted) ## ## Iterations = 1:10 ## Thinning interval = 1 ## Number of chains = 1 ## Sample size per chain = 10 ## ## 1. Empirical mean and standard deviation for each variable, ## plus standard error of the mean: ## ## Mean SD Naive SE Time-series SE ## x 0.7 0.483 0.1528 0.1528 ## y 7.0 1.414 0.4472 0.2942 ## ## 2. Quantiles for each variable: ## ## 2.5% 25% 50% 75% 97.5% ## x 0 0.25 1.0 1 1.000 ## y 5 6.00 7.5 8 8.775 4.3 Beta Distribution in JAGS 4.3.1 Set the working directory To run this file, we create a folder called ‘Bernoulli and Binomial’. Currently, the code assumes this is in the C drive as C:\\Bayes Course\\Analyses\\Bernoulli and Binomial\\ Inside the ‘Bernoulli and Binomial’ folder, create a subfolder called ‘R’. Currently, the code assumes this is in the C drive as C:\\Bayes Course\\Analyses\\Bernoulli and Binomial\\R\\ . We store this file in the ‘R’ folder. The following is the R code demonstrating a Bayesian analysis using R and JAGS. # Define folders with locations # Here is where you can change the location of the &quot;main folder&quot; main.folder &lt;- &quot;Bayes Course/Analyses/Bernoulli and Binomial/&quot; R.folder &lt;- paste0(main.folder, &quot;R/&quot;) jags.folder &lt;- paste0(main.folder, &quot;jags&quot;) dir.create(jags.folder) ## Warning in dir.create(jags.folder): &#39;Bayes Course/Analyses/Bernoulli and ## Binomial/jags&#39; already exists # Call the packages library(rjags) 4.3.2 Define the Model and Write out the code # Define the model in JAGS code modelstring &lt;- as.character(&quot; model{ x[1] ~ dbeta(1,1) x[2] ~ dbeta(5,5) x[3] ~ dbeta(5,17) x[4] ~ dbeta(.5, .5) } # closes the model &quot;) # closes the model as string # Write out the code to a file model.file.name &lt;- &quot;Beta Distributions.txt&quot; write(x=modelstring, file=paste0(jags.folder, model.file.name), append=FALSE) 4.3.3 Model Specification # Define entities to monitor entities.to.monitor &lt;- c(&quot;x&quot;) # Choose features of MCMC # the total number of iterations n.iters = 40000 # Run MCMC # Move to the JAGS folder # setwd(jags.folder) # Initialize the model # jags.model.fitted &lt;- jags.model(file=model.file.name) "]]
