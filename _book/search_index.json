[["intro.html", "Chapter 2 Introduction to R 2.1 Part 1: Vector 2.2 Part 2: Basic Statistical Analysis 2.3 Part 3: Matrix Computation 2.4 Part 4: Data Manipulation 2.5 Part 5: Factor, List, and Dataframe 2.6 Part 6: conditional statement 2.7 Part 7: R functions 2.8 Part 8: Splitting data &amp; implicit loops", " Chapter 2 Introduction to R 2.1 Part 1: Vector Define variable / vector 2.1.1 Numbers # Type in a numerical data, assign them to the variable: weight weight = c(60,72,57,90,95,72) # Print out the variable weight ## [1] 60 72 57 90 95 72 # You can also type in decimals height = c(1.75,1.80,1.65,1.90,1.74,1.91) # Or even formulas, assign to the variable. bmi = weight/(height)^2 bmi ## [1] 19.59184 22.22222 20.93664 24.93075 31.37799 19.73630 2.1.2 Strings (nominal) # Characters between the quotation marks are consider strings A = c(&quot;NewYork&quot;,&quot;London&quot;,&quot;San Francisco&quot;) A ## [1] &quot;NewYork&quot; &quot;London&quot; &quot;San Francisco&quot; 2.1.3 Logical # A logical vector is a vector that only contains TRUE and FALSE values. In R, true values are designated with TRUE, and false values with FALSE. B=c(T,T,F,F) B ## [1] TRUE TRUE FALSE FALSE bmi &gt; 25 # relational expressions ## [1] FALSE FALSE FALSE FALSE TRUE FALSE 2.1.4 Generate a sequence of numbers seq(4,9) #sequence from 4 to 9, increment defaults to 1, alternatively, 4:9 ## [1] 4 5 6 7 8 9 seq(4,10,2) #sequence from 4 to 10, increment is 2 ## [1] 4 6 8 10 seq(1,10,.1) #sequence from 1 to 10, increment is .1 ## [1] 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 ## [16] 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 ## [31] 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 ## [46] 5.5 5.6 5.7 5.8 5.9 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 ## [61] 7.0 7.1 7.2 7.3 7.4 7.5 7.6 7.7 7.8 7.9 8.0 8.1 8.2 8.3 8.4 ## [76] 8.5 8.6 8.7 8.8 8.9 9.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 ## [91] 10.0 seq(-8,9,.5) #sequence from -8 to 9, increment is .5 ## [1] -8.0 -7.5 -7.0 -6.5 -6.0 -5.5 -5.0 -4.5 -4.0 -3.5 -3.0 -2.5 -2.0 -1.5 -1.0 ## [16] -0.5 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 ## [31] 7.0 7.5 8.0 8.5 9.0 2.1.5 Replicate values exp1 &lt;- c(1,2,3,4,5) #create a vector named as exp1 rep(exp1,3) #repeat 3 times ## [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5 ha=c(1,2,3,&quot;sun&quot;) rep(ha,4) #repeat &quot;ha&quot; four times ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;sun&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;sun&quot; &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;sun&quot; ## [13] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;sun&quot; rep(ha,1:4) #each element is repeated different times, according to the second argument ## [1] &quot;1&quot; &quot;2&quot; &quot;2&quot; &quot;3&quot; &quot;3&quot; &quot;3&quot; &quot;sun&quot; &quot;sun&quot; &quot;sun&quot; &quot;sun&quot; rep(3:4,c(100,200)) #the first element repeat 100 time, the second 200 times ## [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [38] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 ## [75] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 ## [112] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [149] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [186] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [223] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [260] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 ## [297] 4 4 4 4 2.1.6 Practice Questions 2.1.6.1 Question 1 Create a sequence (name it with your first name) ranging from 1 to 100, increment is 1 2.1.6.2 Question 2 Repeat the sequence just created 3 times 2.1.6.3 Question 3 Calculate the ratios between the two variables as last/first, and multiply by 2. 2.2 Part 2: Basic Statistical Analysis 2.2.1 Buiding a simulated data set # We use the following functions to build a simulated data set. ACT_score &lt;- round(runif(n=100,min=18,max=25),0) 2.2.2 Basic Statistical function # calculate summation sum(ACT_score) ## [1] 2129 # calculate average score mean(ACT_score) ## [1] 21.29 # calculate median score median(ACT_score) ## [1] 21 # calculate variance var(ACT_score) ## [1] 3.985758 # calculate standard deviation sd(ACT_score) ## [1] 1.996436 # print vector length (sample size) length(ACT_score) ## [1] 100 # calculate square root of each number sqrt(ACT_score) ## [1] 4.582576 4.582576 4.795832 4.690416 4.898979 4.795832 4.795832 4.690416 ## [9] 4.795832 5.000000 4.582576 4.472136 4.690416 4.582576 4.582576 4.358899 ## [17] 4.582576 4.242641 4.582576 4.690416 4.242641 4.795832 5.000000 4.795832 ## [25] 4.795832 4.358899 5.000000 4.358899 4.472136 4.582576 4.582576 4.358899 ## [33] 4.795832 4.358899 4.358899 4.795832 4.582576 4.582576 4.472136 4.242641 ## [41] 4.795832 4.690416 4.472136 4.472136 4.242641 4.242641 4.242641 5.000000 ## [49] 4.358899 4.582576 4.358899 5.000000 4.582576 4.690416 4.358899 5.000000 ## [57] 4.472136 4.582576 4.898979 4.358899 4.472136 4.472136 4.795832 4.472136 ## [65] 4.358899 4.898979 4.582576 5.000000 4.690416 4.242641 4.690416 4.582576 ## [73] 5.000000 4.582576 4.472136 4.898979 4.690416 4.472136 4.582576 4.472136 ## [81] 4.582576 4.690416 4.358899 4.472136 4.582576 4.472136 4.898979 4.690416 ## [89] 4.582576 4.358899 4.582576 4.898979 5.000000 4.358899 4.795832 4.690416 ## [97] 4.690416 4.472136 4.472136 4.898979 #--with NA, print order of each number in the vector order(ACT_score) ## [1] 18 21 40 45 46 47 70 16 26 28 32 34 35 49 51 55 60 65 ## [19] 83 90 94 12 29 39 43 44 57 61 62 64 75 78 80 84 86 98 ## [37] 99 1 2 11 14 15 17 19 30 31 37 38 50 53 58 67 72 74 ## [55] 79 81 85 89 91 4 8 13 20 42 54 69 71 77 82 88 96 97 ## [73] 3 6 7 9 22 24 25 33 36 41 63 95 5 59 66 76 87 92 ## [91] 100 10 23 27 48 52 56 68 73 93 # calculate range of the vector range(ACT_score) ## [1] 18 25 #--omit NA, sort date from low to hight sort(ACT_score) ## [1] 18 18 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 19 19 19 19 20 20 20 20 ## [26] 20 20 20 20 20 20 20 20 20 20 20 20 21 21 21 21 21 21 21 21 21 21 21 21 21 ## [51] 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 22 22 22 23 23 23 ## [76] 23 23 23 23 23 23 23 23 23 24 24 24 24 24 24 24 25 25 25 25 25 25 25 25 25 #--make a table of counts table(ACT_score) ## ACT_score ## 18 19 20 21 22 23 24 25 ## 7 14 16 22 13 12 7 9 #-- Using the function &quot;describe&quot; from the &quot;psych&quot; package. Please attach the psych package library(psych) ## Warning: package &#39;psych&#39; was built under R version 4.0.2 describe(ACT_score) ## vars n mean sd median trimmed mad min max range skew kurtosis se ## X1 1 100 21.29 2 21 21.21 1.48 18 25 7 0.27 -0.84 0.2 2.2.3 Practice Questions Use the Data set bellow: GRE_score &lt;- round(runif(250,130,170),0) ?runif 2.2.3.1 Question 1 Report summation of all reported scores. 2.2.3.2 Question 2 Report average score based on all reported scores 2.2.3.3 Question 3 Report median score based on all reported scores 2.2.3.4 Question 4 Report variance of all reported scores 2.2.3.5 Question 5 Reorder all scores 2.2.3.6 Question 6 Build a table of counts of each score 2.3 Part 3: Matrix Computation 2.3.1 Build a matrix x=1:12 #set the dimension of the matrix dim(x)=c(3,4) #three rows and four cols x ## [,1] [,2] [,3] [,4] ## [1,] 1 4 7 10 ## [2,] 2 5 8 11 ## [3,] 3 6 9 12 2.3.2 Define a matrix # Different from the above matrix, we define a matrix use matrix function matrix(1:12,nrow=3,byrow=T) ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 ## [3,] 9 10 11 12 2.3.3 Name the rows/columns rownames(); colnames()—-can be used to a data matrix x=matrix(1:12, nrow=3,byrow=T) x ## [,1] [,2] [,3] [,4] ## [1,] 1 2 3 4 ## [2,] 5 6 7 8 ## [3,] 9 10 11 12 rownames(x)=LETTERS[1:3] colnames(x)=LETTERS[4:7] x ## D E F G ## A 1 2 3 4 ## B 5 6 7 8 ## C 9 10 11 12 colnames(x) &lt;- c(&quot;gpa&quot;,&quot;quiz1&quot;,&quot;quiz2&quot;,&quot;final&quot;) x ## gpa quiz1 quiz2 final ## A 1 2 3 4 ## B 5 6 7 8 ## C 9 10 11 12 2.3.4 Operation on matrix # The transpose of a matrix is simply a flipped version of the original matrix. We can transpose a matrix by switching its rows with its columns. t(x) ## A B C ## gpa 1 5 9 ## quiz1 2 6 10 ## quiz2 3 7 11 ## final 4 8 12 #multiply two matrix, if they are conformable x%*%t(x) #check the dimensions ## A B C ## A 30 70 110 ## B 70 174 278 ## C 110 278 446 t(x)%*%x ## gpa quiz1 quiz2 final ## gpa 107 122 137 152 ## quiz1 122 140 158 176 ## quiz2 137 158 179 200 ## final 152 176 200 224 2.3.5 Glue vectors together # Using cbind() function to combine columns cbind(A=1:4,B=5:8,C=9:12) ## A B C ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 # Using rbind() function to combine rows rbind(A=1:4,B=5:8,C=9:12) ## [,1] [,2] [,3] [,4] ## A 1 2 3 4 ## B 5 6 7 8 ## C 9 10 11 12 2.3.6 Inverse the matrix The inverse of a square matrix A, sometimes called a reciprocal matrix, is a matrix \\(A^{-1}\\) such that \\(AA^{-1}=I\\) , where \\(I\\) is the identity matrix. [C] The fractions() need load “MASS” Package. # Load the package &quot;MASS&quot; to use the fractions function library(MASS) ## Warning: package &#39;MASS&#39; was built under R version 4.0.2 # Build a square matrix A. A &lt;- matrix(c(2,3,2,2), nrow=2,byrow=T) # Print out A ## [,1] [,2] ## [1,] 2 3 ## [2,] 2 2 #inverse the matrix inv_A &lt;- solve(A,tol=1e-19) #round round(solve(A,tol=1e-19),3) #to the third digits ## [,1] [,2] ## [1,] -1 1.5 ## [2,] 1 -1.0 #show as rationals fractions(solve(A,tol=1e-19)) ## [,1] [,2] ## [1,] -1 3/2 ## [2,] 1 -1 # Ax=b: solve(A,b) # create an Identity matrix ident_matrix &lt;- diag(2) solve(A,diag(2)) ## [,1] [,2] ## [1,] -1 1.5 ## [2,] 1 -1.0 2.3.7 Practice Questions 2.3.7.1 Question 1 Create a 2 by 2 matrix named “MM” with c(1,5,9,10) arranged by row 2.3.7.2 Question 2 Please inverse the matrix “MM”, name it as MM-T 2.3.7.3 Question 3 Multiply the two matrices “MM” %*% “MM-T”, and show the result 2.4 Part 4: Data Manipulation 2.4.1 Load the Data # Load the package for illustrations library(car) ## Warning: package &#39;car&#39; was built under R version 4.0.2 ## Loading required package: carData ## Warning: package &#39;carData&#39; was built under R version 4.0.2 ## ## Attaching package: &#39;car&#39; ## The following object is masked from &#39;package:psych&#39;: ## ## logit # Load the data set data(Prestige) # Check the dimension of the data dim(Prestige) # 102 observations, each observation has 6 variables. ## [1] 102 6 # Checking the variable names names(Prestige) ## [1] &quot;education&quot; &quot;income&quot; &quot;women&quot; &quot;prestige&quot; &quot;census&quot; &quot;type&quot; # subset the data Prestige[1:10,1:3] #selecting the first 10 subjects with first three variables ## education income women ## gov.administrators 13.11 12351 11.16 ## general.managers 12.26 25879 4.02 ## accountants 12.77 9271 15.70 ## purchasing.officers 11.42 8865 9.11 ## chemists 14.62 8403 11.68 ## physicists 15.64 11030 5.13 ## biologists 15.09 8258 25.65 ## architects 15.44 14163 2.69 ## civil.engineers 14.52 11377 1.03 ## mining.engineers 14.64 11023 0.94 Prestige[,1:3] #selecting all subjects with first three variables ## education income women ## gov.administrators 13.11 12351 11.16 ## general.managers 12.26 25879 4.02 ## accountants 12.77 9271 15.70 ## purchasing.officers 11.42 8865 9.11 ## chemists 14.62 8403 11.68 ## physicists 15.64 11030 5.13 ## biologists 15.09 8258 25.65 ## architects 15.44 14163 2.69 ## civil.engineers 14.52 11377 1.03 ## mining.engineers 14.64 11023 0.94 ## surveyors 12.39 5902 1.91 ## draughtsmen 12.30 7059 7.83 ## computer.programers 13.83 8425 15.33 ## economists 14.44 8049 57.31 ## psychologists 14.36 7405 48.28 ## social.workers 14.21 6336 54.77 ## lawyers 15.77 19263 5.13 ## librarians 14.15 6112 77.10 ## vocational.counsellors 15.22 9593 34.89 ## ministers 14.50 4686 4.14 ## university.teachers 15.97 12480 19.59 ## primary.school.teachers 13.62 5648 83.78 ## secondary.school.teachers 15.08 8034 46.80 ## physicians 15.96 25308 10.56 ## veterinarians 15.94 14558 4.32 ## osteopaths.chiropractors 14.71 17498 6.91 ## nurses 12.46 4614 96.12 ## nursing.aides 9.45 3485 76.14 ## physio.therapsts 13.62 5092 82.66 ## pharmacists 15.21 10432 24.71 ## medical.technicians 12.79 5180 76.04 ## commercial.artists 11.09 6197 21.03 ## radio.tv.announcers 12.71 7562 11.15 ## athletes 11.44 8206 8.13 ## secretaries 11.59 4036 97.51 ## typists 11.49 3148 95.97 ## bookkeepers 11.32 4348 68.24 ## tellers.cashiers 10.64 2448 91.76 ## computer.operators 11.36 4330 75.92 ## shipping.clerks 9.17 4761 11.37 ## file.clerks 12.09 3016 83.19 ## receptionsts 11.04 2901 92.86 ## mail.carriers 9.22 5511 7.62 ## postal.clerks 10.07 3739 52.27 ## telephone.operators 10.51 3161 96.14 ## collectors 11.20 4741 47.06 ## claim.adjustors 11.13 5052 56.10 ## travel.clerks 11.43 6259 39.17 ## office.clerks 11.00 4075 63.23 ## sales.supervisors 9.84 7482 17.04 ## commercial.travellers 11.13 8780 3.16 ## sales.clerks 10.05 2594 67.82 ## newsboys 9.62 918 7.00 ## service.station.attendant 9.93 2370 3.69 ## insurance.agents 11.60 8131 13.09 ## real.estate.salesmen 11.09 6992 24.44 ## buyers 11.03 7956 23.88 ## firefighters 9.47 8895 0.00 ## policemen 10.93 8891 1.65 ## cooks 7.74 3116 52.00 ## bartenders 8.50 3930 15.51 ## funeral.directors 10.57 7869 6.01 ## babysitters 9.46 611 96.53 ## launderers 7.33 3000 69.31 ## janitors 7.11 3472 33.57 ## elevator.operators 7.58 3582 30.08 ## farmers 6.84 3643 3.60 ## farm.workers 8.60 1656 27.75 ## rotary.well.drillers 8.88 6860 0.00 ## bakers 7.54 4199 33.30 ## slaughterers.1 7.64 5134 17.26 ## slaughterers.2 7.64 5134 17.26 ## canners 7.42 1890 72.24 ## textile.weavers 6.69 4443 31.36 ## textile.labourers 6.74 3485 39.48 ## tool.die.makers 10.09 8043 1.50 ## machinists 8.81 6686 4.28 ## sheet.metal.workers 8.40 6565 2.30 ## welders 7.92 6477 5.17 ## auto.workers 8.43 5811 13.62 ## aircraft.workers 8.78 6573 5.78 ## electronic.workers 8.76 3942 74.54 ## radio.tv.repairmen 10.29 5449 2.92 ## sewing.mach.operators 6.38 2847 90.67 ## auto.repairmen 8.10 5795 0.81 ## aircraft.repairmen 10.10 7716 0.78 ## railway.sectionmen 6.67 4696 0.00 ## electrical.linemen 9.05 8316 1.34 ## electricians 9.93 7147 0.99 ## construction.foremen 8.24 8880 0.65 ## carpenters 6.92 5299 0.56 ## masons 6.60 5959 0.52 ## house.painters 7.81 4549 2.46 ## plumbers 8.33 6928 0.61 ## construction.labourers 7.52 3910 1.09 ## pilots 12.27 14032 0.58 ## train.engineers 8.49 8845 0.00 ## bus.drivers 7.58 5562 9.47 ## taxi.drivers 7.93 4224 3.59 ## longshoremen 8.37 4753 0.00 ## typesetters 10.00 6462 13.58 ## bookbinders 8.55 3617 70.87 Prestige$education #selecting the variable &quot;education&quot; ## [1] 13.11 12.26 12.77 11.42 14.62 15.64 15.09 15.44 14.52 14.64 12.39 12.30 ## [13] 13.83 14.44 14.36 14.21 15.77 14.15 15.22 14.50 15.97 13.62 15.08 15.96 ## [25] 15.94 14.71 12.46 9.45 13.62 15.21 12.79 11.09 12.71 11.44 11.59 11.49 ## [37] 11.32 10.64 11.36 9.17 12.09 11.04 9.22 10.07 10.51 11.20 11.13 11.43 ## [49] 11.00 9.84 11.13 10.05 9.62 9.93 11.60 11.09 11.03 9.47 10.93 7.74 ## [61] 8.50 10.57 9.46 7.33 7.11 7.58 6.84 8.60 8.88 7.54 7.64 7.64 ## [73] 7.42 6.69 6.74 10.09 8.81 8.40 7.92 8.43 8.78 8.76 10.29 6.38 ## [85] 8.10 10.10 6.67 9.05 9.93 8.24 6.92 6.60 7.81 8.33 7.52 12.27 ## [97] 8.49 7.58 7.93 8.37 10.00 8.55 Prestige[1:10,c(&quot;education&quot;,&quot;income&quot;)] #selecting the first 10 subjects with the variables &quot;education&quot; and &quot;income&quot; ## education income ## gov.administrators 13.11 12351 ## general.managers 12.26 25879 ## accountants 12.77 9271 ## purchasing.officers 11.42 8865 ## chemists 14.62 8403 ## physicists 15.64 11030 ## biologists 15.09 8258 ## architects 15.44 14163 ## civil.engineers 14.52 11377 ## mining.engineers 14.64 11023 2.4.2 Select Specific Data # put 1&#39;s in the first col., others in 2-4th X=cbind(1,as.matrix(Prestige[,1:3])) X ## education income women ## gov.administrators 1 13.11 12351 11.16 ## general.managers 1 12.26 25879 4.02 ## accountants 1 12.77 9271 15.70 ## purchasing.officers 1 11.42 8865 9.11 ## chemists 1 14.62 8403 11.68 ## physicists 1 15.64 11030 5.13 ## biologists 1 15.09 8258 25.65 ## architects 1 15.44 14163 2.69 ## civil.engineers 1 14.52 11377 1.03 ## mining.engineers 1 14.64 11023 0.94 ## surveyors 1 12.39 5902 1.91 ## draughtsmen 1 12.30 7059 7.83 ## computer.programers 1 13.83 8425 15.33 ## economists 1 14.44 8049 57.31 ## psychologists 1 14.36 7405 48.28 ## social.workers 1 14.21 6336 54.77 ## lawyers 1 15.77 19263 5.13 ## librarians 1 14.15 6112 77.10 ## vocational.counsellors 1 15.22 9593 34.89 ## ministers 1 14.50 4686 4.14 ## university.teachers 1 15.97 12480 19.59 ## primary.school.teachers 1 13.62 5648 83.78 ## secondary.school.teachers 1 15.08 8034 46.80 ## physicians 1 15.96 25308 10.56 ## veterinarians 1 15.94 14558 4.32 ## osteopaths.chiropractors 1 14.71 17498 6.91 ## nurses 1 12.46 4614 96.12 ## nursing.aides 1 9.45 3485 76.14 ## physio.therapsts 1 13.62 5092 82.66 ## pharmacists 1 15.21 10432 24.71 ## medical.technicians 1 12.79 5180 76.04 ## commercial.artists 1 11.09 6197 21.03 ## radio.tv.announcers 1 12.71 7562 11.15 ## athletes 1 11.44 8206 8.13 ## secretaries 1 11.59 4036 97.51 ## typists 1 11.49 3148 95.97 ## bookkeepers 1 11.32 4348 68.24 ## tellers.cashiers 1 10.64 2448 91.76 ## computer.operators 1 11.36 4330 75.92 ## shipping.clerks 1 9.17 4761 11.37 ## file.clerks 1 12.09 3016 83.19 ## receptionsts 1 11.04 2901 92.86 ## mail.carriers 1 9.22 5511 7.62 ## postal.clerks 1 10.07 3739 52.27 ## telephone.operators 1 10.51 3161 96.14 ## collectors 1 11.20 4741 47.06 ## claim.adjustors 1 11.13 5052 56.10 ## travel.clerks 1 11.43 6259 39.17 ## office.clerks 1 11.00 4075 63.23 ## sales.supervisors 1 9.84 7482 17.04 ## commercial.travellers 1 11.13 8780 3.16 ## sales.clerks 1 10.05 2594 67.82 ## newsboys 1 9.62 918 7.00 ## service.station.attendant 1 9.93 2370 3.69 ## insurance.agents 1 11.60 8131 13.09 ## real.estate.salesmen 1 11.09 6992 24.44 ## buyers 1 11.03 7956 23.88 ## firefighters 1 9.47 8895 0.00 ## policemen 1 10.93 8891 1.65 ## cooks 1 7.74 3116 52.00 ## bartenders 1 8.50 3930 15.51 ## funeral.directors 1 10.57 7869 6.01 ## babysitters 1 9.46 611 96.53 ## launderers 1 7.33 3000 69.31 ## janitors 1 7.11 3472 33.57 ## elevator.operators 1 7.58 3582 30.08 ## farmers 1 6.84 3643 3.60 ## farm.workers 1 8.60 1656 27.75 ## rotary.well.drillers 1 8.88 6860 0.00 ## bakers 1 7.54 4199 33.30 ## slaughterers.1 1 7.64 5134 17.26 ## slaughterers.2 1 7.64 5134 17.26 ## canners 1 7.42 1890 72.24 ## textile.weavers 1 6.69 4443 31.36 ## textile.labourers 1 6.74 3485 39.48 ## tool.die.makers 1 10.09 8043 1.50 ## machinists 1 8.81 6686 4.28 ## sheet.metal.workers 1 8.40 6565 2.30 ## welders 1 7.92 6477 5.17 ## auto.workers 1 8.43 5811 13.62 ## aircraft.workers 1 8.78 6573 5.78 ## electronic.workers 1 8.76 3942 74.54 ## radio.tv.repairmen 1 10.29 5449 2.92 ## sewing.mach.operators 1 6.38 2847 90.67 ## auto.repairmen 1 8.10 5795 0.81 ## aircraft.repairmen 1 10.10 7716 0.78 ## railway.sectionmen 1 6.67 4696 0.00 ## electrical.linemen 1 9.05 8316 1.34 ## electricians 1 9.93 7147 0.99 ## construction.foremen 1 8.24 8880 0.65 ## carpenters 1 6.92 5299 0.56 ## masons 1 6.60 5959 0.52 ## house.painters 1 7.81 4549 2.46 ## plumbers 1 8.33 6928 0.61 ## construction.labourers 1 7.52 3910 1.09 ## pilots 1 12.27 14032 0.58 ## train.engineers 1 8.49 8845 0.00 ## bus.drivers 1 7.58 5562 9.47 ## taxi.drivers 1 7.93 4224 3.59 ## longshoremen 1 8.37 4753 0.00 ## typesetters 1 10.00 6462 13.58 ## bookbinders 1 8.55 3617 70.87 # adding ID X1=cbind(seq(1:102),as.matrix(Prestige[,1:3])) colnames(X1)= c(&quot;ID&quot;,&quot;education&quot;, &quot;income&quot;, &quot;women&quot;) X1 ## ID education income women ## gov.administrators 1 13.11 12351 11.16 ## general.managers 2 12.26 25879 4.02 ## accountants 3 12.77 9271 15.70 ## purchasing.officers 4 11.42 8865 9.11 ## chemists 5 14.62 8403 11.68 ## physicists 6 15.64 11030 5.13 ## biologists 7 15.09 8258 25.65 ## architects 8 15.44 14163 2.69 ## civil.engineers 9 14.52 11377 1.03 ## mining.engineers 10 14.64 11023 0.94 ## surveyors 11 12.39 5902 1.91 ## draughtsmen 12 12.30 7059 7.83 ## computer.programers 13 13.83 8425 15.33 ## economists 14 14.44 8049 57.31 ## psychologists 15 14.36 7405 48.28 ## social.workers 16 14.21 6336 54.77 ## lawyers 17 15.77 19263 5.13 ## librarians 18 14.15 6112 77.10 ## vocational.counsellors 19 15.22 9593 34.89 ## ministers 20 14.50 4686 4.14 ## university.teachers 21 15.97 12480 19.59 ## primary.school.teachers 22 13.62 5648 83.78 ## secondary.school.teachers 23 15.08 8034 46.80 ## physicians 24 15.96 25308 10.56 ## veterinarians 25 15.94 14558 4.32 ## osteopaths.chiropractors 26 14.71 17498 6.91 ## nurses 27 12.46 4614 96.12 ## nursing.aides 28 9.45 3485 76.14 ## physio.therapsts 29 13.62 5092 82.66 ## pharmacists 30 15.21 10432 24.71 ## medical.technicians 31 12.79 5180 76.04 ## commercial.artists 32 11.09 6197 21.03 ## radio.tv.announcers 33 12.71 7562 11.15 ## athletes 34 11.44 8206 8.13 ## secretaries 35 11.59 4036 97.51 ## typists 36 11.49 3148 95.97 ## bookkeepers 37 11.32 4348 68.24 ## tellers.cashiers 38 10.64 2448 91.76 ## computer.operators 39 11.36 4330 75.92 ## shipping.clerks 40 9.17 4761 11.37 ## file.clerks 41 12.09 3016 83.19 ## receptionsts 42 11.04 2901 92.86 ## mail.carriers 43 9.22 5511 7.62 ## postal.clerks 44 10.07 3739 52.27 ## telephone.operators 45 10.51 3161 96.14 ## collectors 46 11.20 4741 47.06 ## claim.adjustors 47 11.13 5052 56.10 ## travel.clerks 48 11.43 6259 39.17 ## office.clerks 49 11.00 4075 63.23 ## sales.supervisors 50 9.84 7482 17.04 ## commercial.travellers 51 11.13 8780 3.16 ## sales.clerks 52 10.05 2594 67.82 ## newsboys 53 9.62 918 7.00 ## service.station.attendant 54 9.93 2370 3.69 ## insurance.agents 55 11.60 8131 13.09 ## real.estate.salesmen 56 11.09 6992 24.44 ## buyers 57 11.03 7956 23.88 ## firefighters 58 9.47 8895 0.00 ## policemen 59 10.93 8891 1.65 ## cooks 60 7.74 3116 52.00 ## bartenders 61 8.50 3930 15.51 ## funeral.directors 62 10.57 7869 6.01 ## babysitters 63 9.46 611 96.53 ## launderers 64 7.33 3000 69.31 ## janitors 65 7.11 3472 33.57 ## elevator.operators 66 7.58 3582 30.08 ## farmers 67 6.84 3643 3.60 ## farm.workers 68 8.60 1656 27.75 ## rotary.well.drillers 69 8.88 6860 0.00 ## bakers 70 7.54 4199 33.30 ## slaughterers.1 71 7.64 5134 17.26 ## slaughterers.2 72 7.64 5134 17.26 ## canners 73 7.42 1890 72.24 ## textile.weavers 74 6.69 4443 31.36 ## textile.labourers 75 6.74 3485 39.48 ## tool.die.makers 76 10.09 8043 1.50 ## machinists 77 8.81 6686 4.28 ## sheet.metal.workers 78 8.40 6565 2.30 ## welders 79 7.92 6477 5.17 ## auto.workers 80 8.43 5811 13.62 ## aircraft.workers 81 8.78 6573 5.78 ## electronic.workers 82 8.76 3942 74.54 ## radio.tv.repairmen 83 10.29 5449 2.92 ## sewing.mach.operators 84 6.38 2847 90.67 ## auto.repairmen 85 8.10 5795 0.81 ## aircraft.repairmen 86 10.10 7716 0.78 ## railway.sectionmen 87 6.67 4696 0.00 ## electrical.linemen 88 9.05 8316 1.34 ## electricians 89 9.93 7147 0.99 ## construction.foremen 90 8.24 8880 0.65 ## carpenters 91 6.92 5299 0.56 ## masons 92 6.60 5959 0.52 ## house.painters 93 7.81 4549 2.46 ## plumbers 94 8.33 6928 0.61 ## construction.labourers 95 7.52 3910 1.09 ## pilots 96 12.27 14032 0.58 ## train.engineers 97 8.49 8845 0.00 ## bus.drivers 98 7.58 5562 9.47 ## taxi.drivers 99 7.93 4224 3.59 ## longshoremen 100 8.37 4753 0.00 ## typesetters 101 10.00 6462 13.58 ## bookbinders 102 8.55 3617 70.87 # select only the 4th column of the dataset: Prestige y=Prestige[,4] y ## [1] 68.8 69.1 63.4 56.8 73.5 77.6 72.6 78.1 73.1 68.8 62.0 60.0 53.8 62.2 74.9 ## [16] 55.1 82.3 58.1 58.3 72.8 84.6 59.6 66.1 87.2 66.7 68.4 64.7 34.9 72.1 69.3 ## [31] 67.5 57.2 57.6 54.1 46.0 41.9 49.4 42.3 47.7 30.9 32.7 38.7 36.1 37.2 38.1 ## [46] 29.4 51.1 35.7 35.6 41.5 40.2 26.5 14.8 23.3 47.3 47.1 51.1 43.5 51.6 29.7 ## [61] 20.2 54.9 25.9 20.8 17.3 20.1 44.1 21.5 35.3 38.9 25.2 34.8 23.2 33.3 28.8 ## [76] 42.5 44.2 35.9 41.8 35.9 43.7 50.8 37.2 28.2 38.1 50.3 27.3 40.9 50.2 51.1 ## [91] 38.9 36.2 29.9 42.9 26.5 66.1 48.9 35.9 25.1 26.1 42.2 35.2 # select the first five subjects with all columns X[1:5,] ## education income women ## gov.administrators 1 13.11 12351 11.16 ## general.managers 1 12.26 25879 4.02 ## accountants 1 12.77 9271 15.70 ## purchasing.officers 1 11.42 8865 9.11 ## chemists 1 14.62 8403 11.68 #select variables (&quot;education&quot; ,&quot;prestige&quot;) and the first five subjects Prestige[1:5,c(&quot;prestige&quot;,&quot;education&quot;)] ## prestige education ## gov.administrators 68.8 13.11 ## general.managers 69.1 12.26 ## accountants 63.4 12.77 ## purchasing.officers 56.8 11.42 ## chemists 73.5 14.62 2.4.3 Correlation and Covariate Matrix # Calculate the correlations among three variables R=cor(cbind(Prestige$education,Prestige$income,Prestige$women)) R # Correlation matrix ## [,1] [,2] [,3] ## [1,] 1.00000000 0.5775802 0.06185286 ## [2,] 0.57758023 1.0000000 -0.44105927 ## [3,] 0.06185286 -0.4410593 1.00000000 plot(Prestige$education,Prestige$income) # Calculate the covariance among three variables S =cov(cbind(Prestige$education,Prestige$income,Prestige$women)) S # Covariance matrix ## [,1] [,2] [,3] ## [1,] 7.444408 6691.13 5.353965 ## [2,] 6691.129509 18027855.55 -59411.383661 ## [3,] 5.353965 -59411.38 1006.471223 2.4.4 Matrix Diagonals # extract diagonal of R (correlation matrix) diag(R) ## [1] 1 1 1 # set diagonal of R diag(R)=NA # make diagonal matrix diag(1:3) ## [,1] [,2] [,3] ## [1,] 1 0 0 ## [2,] 0 2 0 ## [3,] 0 0 3 # order-3 identity matrix diag(3) ## [,1] [,2] [,3] ## [1,] 1 0 0 ## [2,] 0 1 0 ## [3,] 0 0 1 2.4.5 Practice Questions please upload the Grit study.csv 2.4.5.1 Question 1 check the dimentions and names of the dataset 2.4.5.2 Question 2 Using the “describe” function from “psych” package to summarize the dataset 2.4.5.3 Question 3 creat a new variable called “ID” for the given dataset 2.4.5.4 Question 4 rename the last three columns as “internal”, “external”, and “support” 2.4.5.5 Question 5 Subsetting: select the 10 subjects with IDs from 11 to 20, under two variables: internal and grit 2.4.5.6 Question 6 Calculate the correlation and covariance between the two variables:internal and grit 2.4.5.7 Question 7 Extract the diagonal elements of the covariance matrix 2.4.5.8 Question 8 Calculate the inverse matrix of the covariance matrix 2.5 Part 5: Factor, List, and Dataframe 2.5.1 Factors Categorical variables whose input are numeric: “factors” Terminology: a factor has a set of “levels” ## build a continuous variable pain=c(0,3,2,2,1) ## set the level of pain as a factor fpain=factor(pain,levels=0:3) ## categorical has a order: ordinal scale ## rename the factors of our &quot;fpain&quot; variable levels(fpain)=c(&quot;none&quot;,&quot;mild&quot;,&quot;medium&quot;,&quot;sever&quot;) # Print pain (show as only numbers) pain ## [1] 0 3 2 2 1 # Print fpain (show as categorical names) fpain ## [1] none sever medium medium mild ## Levels: none mild medium sever # Turn the categorizes into numbers as.numeric(fpain)-1 ## [1] 0 3 2 2 1 # Check the levels of a variable levels(fpain) ## [1] &quot;none&quot; &quot;mild&quot; &quot;medium&quot; &quot;sever&quot; # Internally, the 4-level factor above consists of 2 items # (a)a vector of integers between 1 and 4 # (b)a character vector of length 4 containing strings describing what the 4 levels are 2.5.2 Building a list Lists are the R objects which contain elements of different types like − numbers, strings, vectors and another list inside it. A list can also contain a matrix or a function as its elements. List is created using list() function. # Combine a collection of objects into a larger composite object. # Generate two vectors with Exam scores exam1=c(50,60,72,92,83,89,58,81) exam2=c(60,71,84,94,95,90,77,87) # Give names to the objects # Build a list containing both exams scores=list(midterm=exam1,final=exam2) # print the composite object scores ## $midterm ## [1] 50 60 72 92 83 89 58 81 ## ## $final ## [1] 60 71 84 94 95 90 77 87 # You can use &quot;$&quot; sign to extract the specific object in a list # extract named components scores$final ## [1] 60 71 84 94 95 90 77 87 2.5.3 Building a Dataframe # Building a data frame using exam data we previously created d=data.frame(exam1,exam2) #the data are paired, the same student has a midterm and a final score d ## exam1 exam2 ## 1 50 60 ## 2 60 71 ## 3 72 84 ## 4 92 94 ## 5 83 95 ## 6 89 90 ## 7 58 77 ## 8 81 87 # Use the &quot;$&quot; sign extract columns from a data frame d$exam1 ## [1] 50 60 72 92 83 89 58 81 2.5.4 Indexing (subsetting) Dataset # Select the 4th element in vector exam1 exam1[4] ## [1] 92 # The 1st,3rd,6th,7th element of &quot;exam1&quot;; alternatively exam2[c(1,3,6,7)] ## [1] 60 84 90 77 # Build an indexing vector &quot;v&quot; v=c(1,3,6,7) # Select the indexing elements of &quot;v&quot; from data exam2 exam2[v] ## [1] 60 84 90 77 # Select the first 6 elements exam2[1:6] ## [1] 60 71 84 94 95 90 # Select all the elements except the positions specified in v exam2[-v] ## [1] 71 94 95 87 # Conditional selection exam2[exam1&gt;=60] ## [1] 71 84 94 95 90 87 # Select all the exam2 scores where exam 1&#39;s scores either less than 70, or larger than 90. exam2[exam1&lt;70 |exam1&gt;90] # &quot;|&quot;means &quot;or&quot; ## [1] 60 71 94 77 # Select all the exam2 scores where exam 1&#39;s scores between 70 to 79. exam2[exam1&gt;=70 &amp; exam1&lt;80] # &amp; means &quot;and&quot; ## [1] 84 2.5.5 More examples on indexing dataset # We will use the same data frame d. d=data.frame(exam1,exam2) # The element in the 5th row, 1st column d[5,1] ## [1] 83 # The vector in the 5th row d[5,] ## exam1 exam2 ## 5 83 95 d[d$exam1&gt;90,] ## exam1 exam2 ## 4 92 94 # Conditional selection with logical outcome lo=d$exam1&gt;60 lo ## [1] FALSE FALSE TRUE TRUE TRUE TRUE FALSE TRUE # Use a logical vector as the indexing vector d[lo,] ## exam1 exam2 ## 3 72 84 ## 4 92 94 ## 5 83 95 ## 6 89 90 ## 8 81 87 2.5.6 Subset and transform data # Use the previous exam data set we created. d ## exam1 exam2 ## 1 50 60 ## 2 60 71 ## 3 72 84 ## 4 92 94 ## 5 83 95 ## 6 89 90 ## 7 58 77 ## 8 81 87 # Subset the dataset where the exam1 scores are larger than 60 d2=subset(d,exam1&gt;60) d2 ## exam1 exam2 ## 3 72 84 ## 4 92 94 ## 5 83 95 ## 6 89 90 ## 8 81 87 # Adding a new column &quot;exam1bonus&quot; using transform function d3=transform(d,exam1bonus=exam1+5) d3 ## exam1 exam2 exam1bonus ## 1 50 60 55 ## 2 60 71 65 ## 3 72 84 77 ## 4 92 94 97 ## 5 83 95 88 ## 6 89 90 94 ## 7 58 77 63 ## 8 81 87 86 2.5.7 Practice Questions 2.5.7.1 Question 1 subset Prestige dataset for subjects whose income is higher than 10,000 without using the “subset” function 2.5.7.2 Question 2 subset Prestige dataset for subjects whose income is higher than 10,000 with using the “subset” function 2.5.7.3 Question 3 subset Prestige dataset for subjects whose income is higher than 10,000 and who are professors without using the “subset” function 2.6 Part 6: conditional statement 2.6.1 if statement if statement is used in evaluating a logical or mathematical expression and getting the desired output based on the specified criteria. if Statement: use it to execute a block of code, if a specified condition is true time=c(9.2,7,7.1,8.2,10.1,11,9.3,4.5,6.6,7.9,10.8,7.8,8.3) status=c(&quot;pass&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;pass&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;pass&quot;,&quot;pass&quot;,&quot;fail&quot;,&quot;pass&quot;,&quot;fail&quot;) # Combine two variables into data frame &quot;rate&quot; rate=data.frame(time,status) rate ## time status ## 1 9.2 pass ## 2 7.0 fail ## 3 7.1 fail ## 4 8.2 fail ## 5 10.1 fail ## 6 11.0 pass ## 7 9.3 fail ## 8 4.5 fail ## 9 6.6 pass ## 10 7.9 pass ## 11 10.8 fail ## 12 7.8 pass ## 13 8.3 fail # use the if function to check the first participant&#39;s pass/fail condition if (rate[1,2]==&quot;pass&quot;){ print(&quot;You are awesome!&quot;) } ## [1] &quot;You are awesome!&quot; Another simple example: # Making a simple comparison x &lt;- 7 y &lt;- 5 if(x &gt; y) { print(&quot;x is greater&quot;) } ## [1] &quot;x is greater&quot; Likewise, you can use following comparison operators to compare two values: ### Practice Questions 2.6.1.1 Question 1 Please write a if condition to evaluate whether the score of rate[3,2] is a “fail” or not, if the logical comparison is true, print out “work harder” 2.6.2 More Example In R, any non-zero value is considered TRUE, whereas a zero is considered FALSE. That’s why all the below if statements are valid. # mathematical expression x &lt;- 7 y &lt;- 5 if(x + y) { print(&quot;True&quot;) } ## [1] &quot;True&quot; # any non-zero value if(-3) { print(&quot;True&quot;) } ## [1] &quot;True&quot; if Statement Without Curly Braces: If you have only one statement to execute, you can skip curly braces. x &lt;- 7 y &lt;- 5 if(x &gt; y) print(&quot;x is greater&quot;) ## [1] &quot;x is greater&quot; Nested if Statement: You can write one if statement inside another if statement to test more than one condition and return different results. x &lt;- 7 y &lt;- 5 z &lt;- 2 if(x &gt; y) { print(&quot;x is greater than y&quot;) if(x &gt; z &amp;&amp; x &gt; y) print(&quot;x is greater than y and z&quot;) } ## [1] &quot;x is greater than y&quot; ## [1] &quot;x is greater than y and z&quot; 2.6.3 The else statement Use else statement to execute a block of code, if the condition is false. Figure 3: if else statement syntax A Simple if-else comparison: x &lt;- 7 y &lt;- 5 if(x &gt; y) { print(&quot;x is greater than y&quot;) } else { print(&quot;x is not greater than y&quot;) } ## [1] &quot;x is greater than y&quot; # use the if function to check the second participant&#39;s pass/fail condition if (rate[2,2]==&quot;pass&quot;){ print(&quot;You are awesome!&quot;) } else { print(&quot;Working harder&quot;) } ## [1] &quot;Working harder&quot; 2.6.4 The else if statement Use else if statement to specify a new condition to test, if the first condition is false. The else if statement allows you to further customize your control structure. You can add as many else if statements as you like. Figure 4: else if statement syntax Using else-if statement x &lt;- 5 y &lt;- 5 if(x &gt; y) { print(&quot;x is greater&quot;) } else if(x &lt; y) { print(&quot;y is greater&quot;) } else { print(&quot;x and y are equal&quot;) } ## [1] &quot;x and y are equal&quot; In R, you can use as many else if statements as you want in your program. There’s no limit. However, it’s not a best practice when you want to make series of decisions. You can use switch() function as an efficient way. # This time we check the participant&#39;s studying time from &quot;rate&quot; data. # Check the first participant&#39;s studying time if(rate[1,1]&lt;=7){ print(&quot;Study More&quot;) } else if (rate[1,1]&gt;7 &amp; rate[1,1]&lt;11){ print(&quot;No pain No gain!&quot;) } else if (rate[1,1]&gt;=11) { print(&quot;You are on fire！&quot;) } ## [1] &quot;No pain No gain!&quot; 2.6.5 Practice Questions 2.6.5.1 Question 1 A school has following rules for grading system: a. Below 25 - F b. 25 to 45 - E c. 45 to 50 - D d. 50 to 60 - C e. 60 to 80 - B f. Above 80 - A A student gets a score of 62, please print out the corresponding grade. Multiple Conditions: True table To join two or more conditions into a single if statement, use logical operators viz. &amp;&amp; (and), || (or) and ! (not). &amp;&amp; (and) expression is True, if all the conditions are true. x &lt;- 7 y &lt;- 5 z &lt;- 2 if(x &gt; y &amp;&amp; x &gt; z) { print(&quot;x is greater&quot;) } ## [1] &quot;x is greater&quot; || (or) expression is True, if at least one of the conditions is True. x &lt;- 7 y &lt;- 5 z &lt;- 9 if(x &gt; y || x &gt; z) { print(&quot;x is greater than y or z&quot;) } ## [1] &quot;x is greater than y or z&quot; ! (not) expression is True, if the condition is false. x &lt;- 7 y &lt;- 5 if(!(x &lt; y)) { print(&quot;x is greater&quot;) } ## [1] &quot;x is greater&quot; 2.6.5.2 Practice question 2.6.5.3 Question 1 Please write a if condition to evaluate whether both scores of rate[1,2] and rate[2,2] are “fails” at the same time or not, if the joint logical comparison is false, print out “please help each other” 2.6.6 One Line If…Else If you have only one statement to execute, one for if , and one for else , you can put it all on the same line: Examples x &lt;- 7 y &lt;- 5 if (x &gt; y) print(&quot;x is greater&quot;) else print(&quot;y is greater&quot;) ## [1] &quot;x is greater&quot; You can also use it to select variable assignment. x &lt;- 7 y &lt;- 5 max &lt;- if (x &gt; y) x else y max ## [1] 7 2.6.7 The ifelse() Function In R, conditional statements are not vector operations. They deal only with a single value. If you pass in, for example, a vector, the if statement will only check the very first element and issue a warning. v &lt;- c(&quot;apple&quot;,&quot;orrange&quot;,&quot;banana&quot;) if(v ==&quot;orrange&quot;) { print(&quot;yes&quot;) } else { print(&quot;no&quot;) } ## Warning in if (v == &quot;orrange&quot;) {: the condition has length &gt; 1 and only the ## first element will be used ## [1] &quot;no&quot; The solution to this is the ifelse() function. The ifelse() function checks the condition for every element of a vector and selects elements from the specified vector depending upon the result. Here’s the syntax for the ifelse() function. Figure 6: if else function Example: v &lt;- c(&quot;apple&quot;,&quot;orrange&quot;,&quot;banana&quot;) ifelse(v ==&quot;orrange&quot;, &quot;yes&quot;, &quot;no&quot;) ## [1] &quot;no&quot; &quot;yes&quot; &quot;no&quot; 2.6.7.1 Practice question 2.6.7.2 Question 1 Use ifelse to evaluate whether each score of rate[,2] is “fail” or not. 2.6.8 R switch() function The nested if…else statement is especially useful when you want to execute a certain block of code when a condition is met. However, if you want to select values based only on a condition, you have a better option: Use the switch() function. Here’s the syntax of the switch() function: Figure 7: Switch function Syntax switch() with String Expression If the expression is a character string, switch() will return the value based on the name of the element. # Select element by name and return its value x &lt;- &quot;a&quot; v &lt;- switch(x, &quot;a&quot;=&quot;apple&quot;, &quot;b&quot;=&quot;banana&quot;, &quot;c&quot;=&quot;cherry&quot;) v ## [1] &quot;apple&quot; x &lt;- &quot;c&quot; v &lt;- switch(x, &quot;a&quot;=&quot;apple&quot;, &quot;b&quot;=&quot;banana&quot;, &quot;c&quot;=&quot;cherry&quot;) v ## [1] &quot;cherry&quot; In case of multiple matches, the value of first matching element is returned. # Select first match and return its value x &lt;- &quot;a&quot; v &lt;- switch(x, &quot;a&quot;=&quot;apple&quot;, &quot;a&quot;=&quot;apricot&quot;, &quot;a&quot;=&quot;avocado&quot;) v ## [1] &quot;apple&quot; Default case In the case of no match, the unnamed element (if any) is returned. If there are more than one unnamed elements present, an error is raised. # Select unnamed element in the case of no match x &lt;- &quot;z&quot; v &lt;- switch(x, &quot;a&quot;=&quot;apple&quot;, &quot;b&quot;=&quot;banana&quot;, &quot;c&quot;=&quot;cherry&quot;, &quot;grapes&quot;) v ## [1] &quot;grapes&quot; switch() with Numeric Expression The numeric version of switch() works in a slightly different way. Instead of using names, the return value is determined purely with positional matching (Index). # Select element by position and return its value x &lt;- 1 v &lt;- switch(x, &quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;) v ## [1] &quot;apple&quot; x &lt;- 3 v &lt;- switch(x, &quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;) v ## [1] &quot;cherry&quot; If the numeric value is out of range (greater than the number of choices), NULL is returned. x &lt;- 5 v &lt;- switch(x, &quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;) v ## NULL 2.6.8.1 Practice question 2.6.8.2 Question 1 time=c(9.2,7,7.1,8.2,10.1,11,9.3,4.5,6.6,7.9,10.8,7.8,8.3) Please check whether a student’s responding time (9.5) is in the vector, “time”. 2.6.9 Use “for” loop The for statement in R is a bit different from what you usually use in other programming languages. Rather than iterating over a numeric progression, R’s for statement can also iterate over the items of a vector or a list. The items are iterated in the order that they appear in the vector. A for loop will run for as many times as you defined. Usually, we use ‘i’ as a variable to run over a ‘range’. The range needs to be defined in the ‘iterable’ argment part. The ‘iterable’ part can be defined as a vector, a list of objects. What is inside of the ‘{}’? You could define items, function you would like to loop through. But, DO NOT FORGET to ‘print out’ the results. Basic Examples, looping over the elements of a defined vector. # Iterate through a vector colors &lt;- c(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;) for (i in colors) { print(i) } ## [1] &quot;red&quot; ## [1] &quot;green&quot; ## [1] &quot;blue&quot; ## [1] &quot;yellow&quot; # Iterate through a list l &lt;- list(3.14, &quot;Hi&quot;, c(1,2,3)) for (i in l) { print(i) } ## [1] 3.14 ## [1] &quot;Hi&quot; ## [1] 1 2 3 If you need to execute a group of statements for a specified number of times, use sequence operator : or built-in function seq() # Print &#39;Hi!&#39; 3 times for (i in 1:3) { print(&quot;Hi!&quot;) } ## [1] &quot;Hi!&quot; ## [1] &quot;Hi!&quot; ## [1] &quot;Hi!&quot; # Iterate a sequence and square each element for (i in seq(from=2,to=8,by=2)) { print(i^2) } ## [1] 4 ## [1] 16 ## [1] 36 ## [1] 64 for Loop Without Curly Braces: If you have only one statement to execute, you can skip curly braces. # Print the numbers 0 to 4 for (x in 0:4) print(x) ## [1] 0 ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 2.6.9.1 Practice question 2.6.9.2 Question 1 time=c(9.2,7,7.1,8.2,10.1,11,9.3,4.5,6.6,7.9,10.8,7.8,8.3) Loop through all the element of the vector “time”, and print out square root of each element. Nested for loop: A nested for loop is a loop within a loop. They are useful for when you want to repeat something several times for several things. for(x in 1:3) { for(y in 1:2) { print(paste(x, y)) } } ## [1] &quot;1 1&quot; ## [1] &quot;1 2&quot; ## [1] &quot;2 1&quot; ## [1] &quot;2 2&quot; ## [1] &quot;3 1&quot; ## [1] &quot;3 2&quot; Break in for Loop: In R, break statement is used to exit the loop immediately. It simply jumps out of the loop altogether, and the program continues after the loop. # Break the loop at &#39;blue&#39; colors &lt;- c(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;) for (x in colors) { if (x == &quot;blue&quot;) break ##break means stop when the condition satifies print(x) } ## [1] &quot;red&quot; ## [1] &quot;green&quot; # Use the for loop to check whether they pass the exam time=c(9.2,7,7.1,8.2,10.1,11,9.3,4.5,6.6,7.9,10.8,7.8,8.3) status=c(&quot;pass&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;pass&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;pass&quot;,&quot;pass&quot;,&quot;fail&quot;,&quot;pass&quot;,&quot;fail&quot;) # Combine two variables into data frame &quot;rate&quot; rate=data.frame(time,status) rate ## time status ## 1 9.2 pass ## 2 7.0 fail ## 3 7.1 fail ## 4 8.2 fail ## 5 10.1 fail ## 6 11.0 pass ## 7 9.3 fail ## 8 4.5 fail ## 9 6.6 pass ## 10 7.9 pass ## 11 10.8 fail ## 12 7.8 pass ## 13 8.3 fail for (i in 1:nrow(rate)) { if (rate[i,2]==&quot;pass&quot;){ print(&quot;You are awesome!&quot;) } else { print(&quot;Working harder&quot;) } } ## [1] &quot;You are awesome!&quot; ## [1] &quot;Working harder&quot; ## [1] &quot;Working harder&quot; ## [1] &quot;Working harder&quot; ## [1] &quot;Working harder&quot; ## [1] &quot;You are awesome!&quot; ## [1] &quot;Working harder&quot; ## [1] &quot;Working harder&quot; ## [1] &quot;You are awesome!&quot; ## [1] &quot;You are awesome!&quot; ## [1] &quot;Working harder&quot; ## [1] &quot;You are awesome!&quot; ## [1] &quot;Working harder&quot; 2.6.9.3 Practice question 2.6.9.4 Question 1 Use the for loop to check how much time they spent on studying. if a person spend less than or equal to 7 hours, print out “study more”; if a person spend more than 7 hours and less than 11 hours, print out “No pain, no gain”; if a person spend more than 11 hours, print out “You are on fire！”. 2.6.10 R Repeat Loop A repeat loop just repeats a block of code indefinitely. In this loop, no condition checking is performed in order to end the loop. To stop repeating the loop, you must put a condition explicitly inside it with break statement. Failing to do so will create an infinite/endless loop. Figure 9: Repeat function Syntax Examples: A repeat loop without a break statement results into an infinite/endless loop. # infinite loop # repeat { # print(&quot;Press Esc to stop me!&quot;) # } However, you can put a condition explicitly inside the body of the loop and use the break statement to exit the loop. # Iterate until x becomes 5 x &lt;- 1 repeat { x &lt;- x + 1 print(x) if (x &gt; 4) break } ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 2.7 Part 7: R functions 2.7.1 Make a function in R In simple terms, a function is a block of statements that can be used repeatedly in a program. R provides many built-in functions and allows programmers to define their own functions. Here’s the syntax of a function in R: DO NOT FORGET to give a name to a defined function; args are the INPUT elements DO NOT FORGET to return the value Create a Function: To define a function in R, use the function command and assign the results to a function name. # Create a function &#39;myfunc&#39; myfunc &lt;- function() { print(&#39;Hello, World!&#39;) } If you have only one statement to execute, you can skip curly braces. # Write a function in one line myfunc &lt;- function() print(&#39;Hello, World!&#39;) Call a Function: You can call (run) the function by adding parentheses after the function’s name. myfunc &lt;- function() { print(&#39;Hello, World!&#39;) } myfunc() ## [1] &quot;Hello, World!&quot; Pass Arguments: You can send information to a function through arguments. Arguments are declared after the function keyword in parentheses. You can send as many arguments as you like, just separate them by a comma,. sum &lt;- function(x, y) { tot &lt;- x + y return(tot) #Return a Value: To return a value from a function, simply use a `return()` function. } #one bad example If you do not include any `return()` function, it automatically returns the last expression. sum &lt;- function(x, y) { x + y } sum(2, 3) ## [1] 5 Named Arguments: If you pass arguments to a function by name, you can put those arguments in any order. pow &lt;- function(x, y) { p &lt;- x ^ y return(p) } # using argument names pow(x=2, y=3) ## [1] 8 # changing the order pow(y=3, x=2) ## [1] 8 2.7.1.1 Practice question 2.7.1.2 Question 1 Write a function to multiply 3 numbers together; then, use the function you wrote to calculate 1510 Return Multiple Values: You can return multiple values by saving the results in a vector (or a list) and returning it. math &lt;- function(x, y) { add &lt;- x + y sub &lt;- x - y mul &lt;- x * y div &lt;- x / y res &lt;- c(addition = add, subtraction = sub, multiplication = mul, division = div) return(res) } math(6, 3) ## addition subtraction multiplication division ## 9 3 18 2 In R, it is often convenient to accept a variable number of arguments passed to the function. To do this, you specify an ellipsis (...) in the arguments when defining a function. For example, below function directly use the arguments from the summary()and ‘plot()’ function as the inputs of the function you create. myfunc &lt;- function(...) { a &lt;- summary(...) b &lt;- plot(...) return(a) return(b) } v &lt;- 1:10 myfunc(v) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 3.25 5.50 5.50 7.75 10.00 2.8 Part 8: Splitting data &amp; implicit loops 2.8.1 Splitting the data # Type in the data set with two variables &quot;time&quot; and &quot;status&quot; # Time means study hours that students spent on studying # Status is an indicator showing whether a candidate pass or fail the exam time=c(9.2,7,7.1,8.2,10.1,11,9.3,4.5,6.6,7.9,10.8,7.8,8.3) status=c(&quot;pass&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;pass&quot;,&quot;fail&quot;,&quot;fail&quot;,&quot;pass&quot;,&quot;pass&quot;,&quot;fail&quot;,&quot;pass&quot;,&quot;fail&quot;) # Combine two variables into data frame &quot;rate&quot; rate=data.frame(time,status) # filter out how much time do participants spent when they passed the exams. sta.pass=rate$time[rate$status==&quot;pass&quot;] sta.pass ## [1] 9.2 11.0 6.6 7.9 7.8 ### ? what is the meaning of this line sta.fail=rate$time[rate$status==&quot;fail&quot;] sta.fail ## [1] 7.0 7.1 8.2 10.1 9.3 4.5 10.8 8.3 2.8.2 Function “apply” # Use ?+function name to check the help document of certain function ?matrix # Use function &quot;matrix&quot; and &quot;rnorm&quot; to build a random function m=matrix(rnorm(12),nrow =4) m ## [,1] [,2] [,3] ## [1,] 0.6406575 0.8001697 -0.6893161 ## [2,] 0.2231529 -1.4830562 -0.6353655 ## [3,] -0.7089043 -0.2868606 1.1025553 ## [4,] 1.7405103 1.0329257 1.0198931 # Select the minimum value column wise apply(m,2,min) ## [1] -0.7089043 -1.4830562 -0.6893161 # the second argument: 1 is set to &quot;row&quot;, 2 is set to &quot;column&quot; # the function min() is applied to each column # Select the minimum value row wise apply(m,1,min) ## [1] -0.6893161 -1.4830562 -0.7089043 1.0198931 2.8.2.1 Practice Use apply() function to calculate the mean of values in each column of the matrix: m. Use apply() function to calculate the mean of values in each row of the matrix: m. 2.8.3 Use function “lapply” The function lapply() applies over a list or a vector # Build a list x &lt;- list(a = 1:10, beta = exp(-3:3)) # Compute the list mean for each list element lapply(x,mean) ## $a ## [1] 5.5 ## ## $beta ## [1] 4.535125 # Quantiles for each list element 0.25 0.50 0.75 lapply(x, quantile, probs = c(0.25, 0.50, 0.75)) ## $a ## 25% 50% 75% ## 3.25 5.50 7.75 ## ## $beta ## 25% 50% 75% ## 0.2516074 1.0000000 5.0536690 "]]
