###################################################
###     #1          vector
###################################################
# define variable / vector
# Example 1: numbers
weight = c(60,72,57,90,95,72)
weight
height = c(1.75,1.80,1.65,1.90,1.74,1.91)
bmi = weight/(height)^2
bmi

# Example 2: strings (nominal)
A = c("NewYork","London","San Francisco")
A

# Example 3: logical
B=c(T,T,F,F)
B

bmi > 25  #relational expressions

# Example 4: create vectors (sequencial numbers)
seq(4,9) #sequence from 4 to 9, increment defaults to 1, alternatively, 
4:9
seq(4,10,2) #sequence from 4 to 10, increment is 2
seq(1,10,.1)#sequence from 1 to 10, increment is .1
seq(-8,9,.5) #sequence from -8 to 9, increment is .5

# Example 5: use rep() to replicate values
ha=c(1,2,3,"sun")
rep(ha,4) #repeat "ha" four times
rep(ha,1:4) #each element is repeated different times, according to the second argument
rep(3:4,c(100,200)) #the first element repeat 100 time, the second 200 times

#### Practice Qs

# Create a sequence variable (name it with your first name) ranging from 1 to 100, increment is 2

# Create a variable (name it with your last name). repeat 5 by 50 times 

# Calculate the ratios between the two variables as last/first, and multiply by 2


###################################################
###     #2          Basic Statistical Analysis 
###################################################
#use c(...)to define a vector
ACT_score <- round(runif(100,18,25),0)

#basic function of vectors: 
sum(ACT_score) # calculate summation
mean(ACT_score) # calculate average score
median(ACT_score) # calculate median score
var(ACT_score) # calculate variance
sd(ACT_score) # calculate standard deviation
length(ACT_score) # print vector length (sample size)
sqrt(ACT_score) # calculate square root of each number
order(ACT_score)    #--with NA, print order of each number in the vector
range(ACT_score) # calculate range of the vector
sort(ACT_score)  #--omit NA, sort date from low to hight
table(ACT_score)  #--make a table of counts

#### Practice Qs
GRE_score <- round(runif(250,130,170),0)

# report summation of all reported scores

# report average score based on all reported scores

# report median score based on all reported scores

# report variance of all reported scores

# reorder all scores

# table the counts of each score

###################################################
###     #2          matrices and arrays
###################################################
# Example 1: define a matrix 
x=1:12 
dim(x)=c(3,4) #set the dimension of the matrix
x

# Example 2: define a matrix using matrix()
matrix(1:12,nrow=3,byrow=T) #different from the above matrix x

# Example 3:  rownames(); colnames()----can be used to a data matrix
x=matrix(1:12, nrow=3,byrow=T)
rownames(x)=LETTERS[1:3]
x

# Example 4: operation on matrix
t(x) #transpose 
x%*%t(x) #multiply two matrix, if they are conformable
t(x)%*%x

# Example 5: glue vectors together, columnwise or rowwise, using cbind(), or rbind()
cbind(A=1:4,B=5:8,C=9:12)
rbind(A=1:4,B=5:8,C=9:12)

#### Practice Qs

#### create a 2 by 2 matrix "MM" with c(1,5,9,10) arranged by row 

#### inverse the matrix "MM"



###################################################
###         matrix computation
###################################################

#transpose:           t(A)
#inverse:             solve(A)
#round:               round(solve(A),3) #to the third digits
#show as rationals:   fractions(solve(A))
#solve equation Ax=b: solve(A,b)

library(car)
data(Prestige)
dim(Prestige)
#subset
Prestige[1:10,1:3]
Prestige[,1:3]

#data manipulation
X=cbind(1,as.matrix(Prestige[,1:3]))#put 1's in the first col., others in 2-4th
X
## combine the columns together 

#selecting a single column from the data frame produces a vector rather than a 
#one-column matrix: in indexing, it automatically drops dimensions with extent 1
#we can circumvent this behavior by specifying drop=F.
#compare:
y=Prestige[,4] #select only the 4th column of the dataset: Prestige
y
X[1:5,] #select the first five subjects with all columns

Prestige[1:5,c("prestige","education")] #select variables ("education" ,"prestige") and the first five subjects

#### calculate the correlations among three variables 
R=cor(cbind(Prestige$education,Prestige$income,Prestige$women))
R #correlation matrix
#plot(Prestige$education,Prestige$income)

S =cov(cbind(Prestige$education,Prestige$income,Prestige$women))
S #cov matrix

diag(R)    #extract diagonal of R (correlation matrix)
diag(R)=NA #set diagonal of R
diag(1:3)  #make diagonal matrix
diag(3)    #order-3 identity matrix

######## Practice Qs

#### subsetting: select the 10 subjects with IDs from 11 to 20, under two variables:women and education 

#### calculate the correlation and covariance between the two variables:women and education 

### extract the diagnol elements of the covariance matrix 

### calculate the inverse matrix of the covariance matrix 

###################################################
###     #3          factors
###################################################

# categorical variables whose input are numeric: "factors"
# terminology: a factor has a set of "levels"
# Example 1
pain=c(0,3,2,2,1) ## continous
fpain=factor(pain,levels=0:3) ## categorical has a order: ordinal scale
levels(fpain)=c("none","mild","medium","sever") ## rename the variables
pain
fpain
as.numeric(fpain)-1
levels(fpain)
#Internally, a 4-level factor consists of 2 items 
#(a)a vector of integers between 1 and 4
#(b)a character vector of length 4 containing strings describing what the 4 levels are

###################################################
###     #4          lists
###################################################

#combine a collection of objects into a larger composite object. 
exam1=c(50,60,72,92,83,89,58,81)             #generate vectors
exam2=c(60,71,84,94,95,90,77,87)
scores=list(midterm=exam1,final=exam2) #give names to the objects
scores                                 #print the composite object
scores$final                           #extract named components 

###################################################
###     #5          data frames(i.e. data matrix, data set)
###################################################

d=data.frame(exam1,exam2)
d          #the data are paired, the same student has a midterm and a final score
d$exam1    #extract column

###################################################
###     #5          indexing (subsetting)
###################################################

# Example 1
exam1[4]   #the 4th element in vector exam1
exam2[c(1,3,6,7)] #the 1st,3rd,6th,7th element of "exam1"; alternatively
v=c(1,3,6,7)
exam2[v]
exam2[1:6]        #the first 6 elements
exam2[-v]         #all the elements except the positions specified in v
exam2[exam1>=60]  #conditional selection
exam2[exam1<70 |exam1>90] #"|"means "or"; 
exam2[exam1>=70 & exam1<80] # & means "and"

# Example 2
d=data.frame(exam1,exam2)
d[5,1]       #the element in the 5th row, 1st column
d[5,]        #the vector in the 5th row
d[d$exam1>90,]
lo=d$exam1>60 #this is a logical vector
lo
d[lo,]         #use a logical vector as the indexing vector

####
###################################################
###     #6          subset and transform
###################################################

#subset()
#transform()
d
d2=subset(d,exam1>60)
d2
d3=transform(d,exam1bonus=exam1+5)
d3

#### Practice Qs

#### subset Prestige dataset for subjects whose income is higher than 10,000 
#### without using the "subset" function


#### #### subset Prestige dataset for subjects whose income is higher than 10,000 
#### with using the "subset" function



#### #### subset Prestige dataset for subjects whose income is higher than 10,000 
#### and who are professors
#### without using the "subset" function


###################################################
###     #7          split data
###################################################

# Example 1: method 1
time=c(9.2,7,7.1,8.2,10.1,11,9.3,4.5,6.6,7.9,10.8,7.8,8.3)
status=c("pass","fail","fail","fail","fail","pass","fail","fail","pass","pass","fail","pass","fail")
rate=data.frame(time,status)
sta.pass=rate$time[rate$status=="pass"] ### people who passed the exams. how much time they spent

sta.fail=rate$time[rate$status=="fail"] ### ? what is the meaning of this line 


###################################################
###     #8          implicit loops
###################################################

#apply()
#tapply()
#lapply()
#sapply()
#replicate()

# Example 1
?matrix
m=matrix(rnorm(12),nrow =4)
m
apply(m,2,min) #columnwise minima
# the second argument: 1 is set to "row", 2 is set to "column"
# the function min() is applied to each column 
apply(m,1,min) #rowwise minima

# Example 2
x <- cbind(x1 = rep(3,8), x2 = c(4:1, 2:5)) #generate a matrix x
dimnames(x)[[1]] <- letters[1:8]  #give rownames :a to h
col.sums <- apply(x, 2, sum) #sum() apply to each column
row.sums <- apply(x, 1, sum) #sum() apply to each row
rbind(cbind(x, Rtot = row.sums), Ctot = c(col.sums, sum(col.sums)))
#generate a table for the row sums, column sums and grand total

# Example 3 
# lapply()applies a functio over a list or a vector
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
# compute the list mean for each list element
lapply(x,mean)
lapply(x, quantile, probs = 1:3/4) #quantiles for each list element 0.25 0.50 0.75

# Example 4 
hist(replicate(100, mean(rexp(10))))
#format: replicate(n,expr), where expr, usually a call, to evaluate repeatedly

###################################################
###     #9          flow control
###################################################

# Example 3: for()
x=seq(0,1,.05)
plot(x,x,ylab="y",type="l")
for(j in 2:8) lines(x,x^j)

###################################################
###     #10          data entry
###################################################

#reading data from a text file
#read.table()--the path should be supplied in the argument, use "C:/.../..", header=T/F
#read.csv()
#read.csv2()
#package "foreign" contain routines to real files from SPSS(.sav),SAS(export libraries),Stata
#ordinary SAS data are NOT among the supported formats, they have to be converted to 
#export libraries on the oringinating system. 

data(pressure)   #pressure is a built in data
a=edit(pressure) #will not overwrite the original data
fix(pressure)    #will overwrite the original data

###################################################
###     #11          random sampling
###################################################

sample(1:10,5) #randomly pick 5 numbers from 1 to 40
		  #default to be sampling WITHOUT replacement
sample(1:10,5, replace=TRUE) #sample WITH replacement

#simulate tossing a "fair" coin
sample(c("H","T"),10,replace=T)

#simulate an event with a certain probability
sample(c("success","failure"),10,replace=T,prob=c(.8,.2))

###################################################
###     #12          built in distributions
###################################################

# R can generate the following distributions 
#rnorm()---generate random norm data
#rbeta()
#rchisq()
#rgama()
#rhyper()
#rlnorm()
#rlogis()--logistics distri
#rmultinom()
#rpois()
#rf()
#rweibull()
#rwilcox
#runif--uniform distribution
#rnbinom()

# densities: add prefix "d-", "q-",or "p-" to the distribution name, 
# Examples 1:  t-distribution
?rt()
rt(100,10)
dt(2.5,df=10) #calculate the probability when t=2.5, df=10 p-value
qt(.975, df=10) #calculate the t value at which the probability below it is .975
pt(2.228139, df=10) #calculate the cdf at t=2.228139


# Example 2
plot(function(x) dt(x, df = 3, ncp = 2), -3, 11, ylim = c(0, 0.32),
		main="Non-central t - Density", yaxs="i")

# Example 3
x=seq(-4,4,.1)
plot(x,dnorm(x),type="l") # alternatively
curve(dnorm(x),from=-4,to=4)

# Example 4
x=0:50
plot(x,dbinom(x,size=50,prob=.33),type="h")





